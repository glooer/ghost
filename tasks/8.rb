require "Wrong/assert"
include Wrong::Assert

=begin
  (8) 
  Напишите программу построения латинского квадрата. 
  Латинский квадрат – матрица NxN, элементы которой выбраны от 1 до N так, что каждое число встречается только один раз в каждой строке и в каждом столбце. 
  Циклический сдвиг осуществляется в отдельной процедуре. 
  Пример латинского квадрата порядка 3: 
  1 2 3 
  3 2 1 
  2 3 1 
  или 
  2 1 3 
  3 1 2 
  1 3 2
=end


class Array
  def rotateq(n) # на самом деле тут уже есть метод rotate, но вероятно использование стандартного метода не проктатит...
    self[n..-1] + self[0...n]
  end
end

def solution(n)
  Array.new(n){ |v| Array.new(n){ |v| v + 1 }.rotateq(v) }
end

assert{ solution(1) == [[1]] }
assert{ solution(2) == [[1, 2], [2, 1]] }
assert{ solution(3) == [[1, 2, 3], [2, 3, 1], [3, 1, 2]] }
assert{ solution(5) == [[1, 2, 3, 4, 5], [2, 3, 4, 5, 1], [3, 4, 5, 1, 2], [4, 5, 1, 2, 3], [5, 1, 2, 3, 4]] }
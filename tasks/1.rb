require "Wrong/assert"
include Wrong::Assert

=begin
  (1)
  "—читалка". N реб€т располагаютс€ по кругу. ќтсчет начинают от первого, удал€ют каждого k-го, смыка€ круг после каждого удалени€. ќпределите пор€док удалени€ реб€т из круга. «амечание. ≈сли k>0, то отсчет ведетс€ по часовой стрелке, иначе против часовой
=end

def solution(n = 10, k = 11)
  arr = (1..n).to_a
  res = []
  i = 0
  while not arr.empty?
    i = (i + arr.size + k - 1) % arr.size
    res << arr.delete_at(i)
  end
  res
end

=begin

n = 10, k = 2

1 2 3 4 5 6 7 8 9 10
                      # => []
1 2 3 4 5 6 7 8 9 10
  ^                   # => [2]
1 3 4 5 6 7 8 9 10
    ^                 # => [2, 4]
1 3 5 6 7 8 9 10
      ^               # => [2, 4, 6]
1 3 5 7 8 9 10
        ^             # => [2, 4, 6, 8]
1 3 5 7 9 10
          ^           # => [2, 4, 6, 8, 10]
1 3 5 7 9
  ^                   # => [2, 4, 6, 8, 10, 3]
1 5 7 9
    ^                 # => [2, 4, 6, 8, 10, 3, 7]
1 5 9
^                     # => [2, 4, 6, 8, 10, 3, 7, 1]
5 9
  ^                   # => [2, 4, 6, 8, 10, 3, 7, 1, 9]
5
^                     # => [2, 4, 6, 8, 10, 3, 7, 1, 9, 5]

[2, 4, 6, 8, 10, 3, 7, 1, 9, 5]

=end
assert { solution(10, 2) == [2, 4, 6, 8, 10, 3, 7, 1, 9, 5] }

=begin

n = 10, k = 5

1 2 3 4 5 6 7 8 9 10
                      # => []
1 2 3 4 5 6 7 8 9 10
        ^             # => [5]
1 2 3 4 6 7 8 9 10
                ^     # => [5, 10]
1 2 3 4 6 7 8 9
        ^             # => [5, 10, 6]
1 2 3 4 7 8 9
  ^                   # => [5, 10, 6, 2]
1 3 4 7 8 9
          ^           # => [5, 10, 6, 2, 9]
1 3 4 7 8
        ^             # => [5, 10, 6, 2, 9, 8]
1 3 4 7
^                     # => [5, 10, 6, 2, 9, 8, 1]
3 4 7
  ^                   # => [5, 10, 6, 2, 9, 8, 1, 4]
3 7
  ^                   # => [5, 10, 6, 2, 9, 8, 1, 4, 7]
3
^                     # => [5, 10, 6, 2, 9, 8, 1, 4, 7, 3]

[5, 10, 6, 2, 9, 8, 1, 4, 7, 3]

=end

assert { solution(10, 5) == [5, 10, 6, 2, 9, 8, 1, 4, 7, 3] }


assert { solution == [1, 3, 6, 10, 8, 9, 5, 2, 4, 7] }